name: Wisecow CI/CD on Kind

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/wisecow

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.meta.outputs.tags }}
    steps:
    - name: 1. Checkout repository
      uses: actions/checkout@v4

    - name: 2. Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 3. Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: 4. Extract metadata (tags) for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.IMAGE_NAME }}
        tags: |
          type=sha,prefix=
          type=raw,value=latest

    - name: 5. Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  deploy-to-kind:
   runs-on: ubuntu-latest
   needs: build-and-push # This defines dependency on the previous job
  # ❌ REMOVE: The 'outputs' section below is incorrectly placed here.
  # outputs:
  #   image_tag: ${{ steps.meta.outputs.tags }}
  #   image_latest: ${{ env.IMAGE_NAME }}:latest
   steps:
    - name: 1. Checkout repository
      uses: actions/checkout@v4

    - name: 2. Create Kind Cluster with Port Mapping
      uses: helm/kind-action@v1.9.0
      with:
        config: kubernetes/kind-config.yaml

    - name: 3. Install Nginx Ingress Controller
      run: |
        kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/kind/deploy.yaml
        kubectl wait --namespace ingress-nginx --for=condition=ready pod --selector=app.kubernetes.io/component=controller --timeout=90s

    - name: 4. Load Docker Image into Kind Cluster
      run: |
        # ✅ FIX: Use the explicit 'image_latest' output from the previous job
        kind load docker-image ${{ needs.build-and-push.outputs.image_latest }}

    - name: 5. Install Cert-Manager CRDs
      run: |
        # Install the Custom Resource Definitions (CRDs) required by Cert-Manager
        kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.14.3/cert-manager.crds.yaml

    - name: 6. Install Cert-Manager using Helm
      run: |
        # Add the official Cert-Manager Helm repository
        helm repo add jetstack https://charts.jetstack.io
        helm repo update

        # Install cert-manager into the 'cert-manager' namespace
        helm upgrade --install cert-manager jetstack/cert-manager \
          --namespace cert-manager --create-namespace \
          --version v1.14.3 \
          --set installCRDs=false # CRDs are already installed in the previous step
        
        # Wait for the Cert-Manager pods to be ready
        echo "Waiting for Cert-Manager pods to start..."
        kubectl wait --namespace cert-manager \
          --for=condition=ready pod \
          --selector=app.kubernetes.io/instance=cert-manager \
          --timeout=180s
        
    - name: 7. Apply Kubernetes Manifests (Deployment, Service, TLS)
      run: |
        # Apply the Deployment, Service, ClusterIssuer, and Ingress
        kubectl apply -f kubernetes/
        
    - name: 8. Wait for Wisecow Deployment to be Ready
      run: |
        kubectl wait --for=condition=Available deployment/wisecow-deployment --timeout=120s
        
    - name: 9. Verification (E2E TLS Test)
      run: |
        # Map dummy domain to the Ingress controller access point (localhost:443)
        echo "127.0.0.1 wisecow.yourdomain.com" | sudo tee -a /etc/hosts
        
        # Wait for cert-manager to provision the test cert
        echo "Waiting for TLS certificate to be provisioned..."
        # The 'certificate' resource must be created via 'kubectl apply -f kubernetes/' in step 7
        kubectl wait --for=condition=ready certificate/wisecow-tls-secret --timeout=180s
        
        # Test secure TLS communication (--insecure is necessary for staging certs)
        curl -vk https://wisecow.yourdomain.com/
